# -*- coding: utf-8 -*-
"""gerador_g1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s0HojWqcdIwYIlKx0lhM1OQZJWfCIurW

# Gerador de Tuplas

Este notebook serve para geração de tuplas para um banco de dados com três tabelas (Consumidor, Produto, Compra). Foi desenvolvido para atender a disciplina de Sistemas de Bancos de Dados na UFSCar Sorocaba.

Este código foi desenvolvido por Gabriel Teixeira, Guilherme Fantini e Tales Lopes.

*Última alteração no dia 16/10/2020 às 21h25*.

Para mais informações sobre os métodos da biblioteca ```psycopg2```, leia a documentação: https://www.psycopg.org/docs/index.html

Vale ressaltar que o funcionamento pleno do programa só pode ser atingido se você já criou a tabela no PostgreSQL. Além disso, na parte de conexão ao BD, você precisa trocar os atributos database, user e password para o nome do BD criado, seu usuário no PostgreSQL e sua senha no PostgreSQL respectivamente.

**Às vezes, acontecem bugs de não aparecer o que foi inserido no PostgreSQL.
Além disso, a definição de produtos é limitada.**

## Bibliotecas Necessárias
"""

#!pip install psycopg2
from random import randint, random
import psycopg2
import pandas as pd
print("Pacote carregado")
print("Tempo estimado: 25 minutos")

"""## Estruturas de Apoio"""

nome = ['Ana', 'Anathan', 'Alice', 'Anderson', 'Amanda', 'Antonio', 'Andreia', 'Alberto', 'Andre', 'Aline', 'Alexandre', 'Alessandra', 'Beatriz', 'Bruno', 'Bianca', 'Breno', 'Barbara', 'Bernardo', 'Bruna', 'Benedito', 'Caroline', 'Cesar', 'Carlos', 'Cecilia', 'Cristiane','Cristian', 'Danilo', 'Dalberto', 'Daniela', 'Douglas', 'Debora', 'Denis', 'Ester', 'Eduardo', 'Enzo', 'Fabricia', 'Fabio', 'Francisco', 'Francisca', 'Franciene', 'Fabricio', 'Fabiola', 'Fatima', 'Fernando', 'Fernanda', 'Fagner', 'Gabriela', 'Gabriel', 'Geovana', 'Gustavo', 'Guilherme', 'Jessica', 'Joao', 'Jonathan', 'Jenifer', 'James', 'Julio', 'Julia', 'Lauren', 'Luan', 'Luana', 'Laura', 'Leandro', 'Luis', 'Lucas', 'Lauana', 'Luiza', 'Luciana', 'Lucia', 'Matheus', 'Mariana', 'Maria', 'Mariano', 'Marcos', 'Maisa', 'Miguel', 'Michel', 'Mauricio', 'Michele', 'Milton', 'Nathalia', 'Nicolas', 'Nathan', 'Nicole', 'Otavio', 'Paulo', 'Paula', 'Pamela', 'Pedro', 'Roberta', 'Roberto', 'Rosane', 'Rosangela', 'Renan', 'Rafael', 'Sabrina', 'Samantha', 'Sandra', 'Sandro','Tales', 'Tatiana', 'Tatiane', 'Valeria', 'Viviane', 'Vitor', 'Valesca', 'Vanessa', 'Willian', 'Wilson', 'Wagner'  ]
cidade = ['Angra dos reis', 'Araras', 'Araraquara', 'Boituva', 'Belo horizonte', 'Campinas', 'Campina grande', 'Campos de jordão', 'Campo grande', 'Goiania', 'Garulhos', 'Itu', 'Itaporanga', 'Joinville', 'Juiz de Fora','Manaus', 'Marilia', 'Maua', 'Macapa', 'Mogi das Cruzes', 'Mossoró','Osasco', 'Praia Grande', 'Porto feliz', 'Porto alegre', 'Peruibe', 'Porto seguro', 'Rio de Janeiro', 'Recife', 'Salvador', 'Sao Luis', 'Sao Gonçalo', 'Sao José do Rio Preto', 'Serra', 'São Vicente','Santos', 'Santa Maria', 'Sete Lagoas', 'São Paulo', 'Sorocaba', 'Votorantim' ]
endereco = ['Rua Washington Luiz',
           'Rua Getúlio Vargas',
           'Rua Castro Alves',
           'Rua São José',
           'Rua Duque de Caxias',
           'Rua Santos Dumont',
           'Rua Sete de Setembro',
           'Rua Alagoas',
           'Rua Boa Vista',
           'Rua Rui Barbosa',
           'Rua Amazonas',
           'Rua Tiradentes',
           'Rua Blumenau',
           'Rua Santa Rita',
           'Rua Dom Pedro II',
           'Rua São Luiz',
           'Rua São Jorge',
           'Rua 15 de novembro',
           'Rua São Sebastião',
           'Rua José Bonifácio',
           'Rua Paraíba',
           'Rua São João']
letra = 'abcdefghijklmnopqrstuvwxyz'

nome_produto = ['Camiseta de Algodão', 'Camiseta Polo', 'Camisa Social', 'Calça Jeans', 'Calça Social', 'Calça Sarja', 'Calça Legging', 'Calça Jogger', 'Calça Flare', 'Vestido', 'Meia', 'Jaqueta', 'Cardigã', 'Moletom', 'Blazer', 'Blusa de lã', 'Blusa de linho', 'Camiseta esportiva', 'Shorts', 'Saia', 'Bermuda de Moletom', 'Bermuda de Sarja', 'Bermuda Tactel', 'Calça de moletom', 
                 'Relógio', 'Brinco', 'Pulseira', 'Colar', 'Bracelete', 'Anél', 'Aliança',
                'Tenis esportivo', 'Tenis casual', 'Sapato social', 'Sapatênis', 'Salto', 'Sapatilha', 'Rasteirinha', 'Chinelo', 'Bota', 'Sandália', 
               'Bolsa de Viagem', 'Mala de Viagem','Travesseiro de Pescoço', 'Carregador portátil', 'Fone de ouvido',
               'Shampoo', 'Sabonete', 'Pasta de Dente', 'Toalha de banho', 'Toalha de rosto', 'Creme', 'Escova de dentes', 'Escova de cabelo' 'Roupão' ]
tipo_produto = ['Vestuário', 'Acessório', 'Calçados', 'Viagem', 'Higiene']
descricao_vestuario = ['Cor azul, tamanho: PP', 'Cor azul, tamanho: P', 'Cor azul, tamanho: M', 'Cor azul, tamanho: G', 'Cor azul, tamanho: GG','Cor preto, tamanho: PP', 'Cor preto, tamanho: P', 'Cor preto, tamanho: M', 'Cor preto, tamanho: G', 'Cor preto, tamanho: GG','Cor branco, tamanho: PP', 'Cor branco, tamanho: P', 'Cor branco, tamanho: M', 'Cor branco, tamanho: G', 'Cor branco, tamanho: GG','Cor vermelha, tamanho: PP', 'Cor vermelha, tamanho: P', 'Cor vermelha, tamanho: M', 'Cor vermelha, tamanho: G', 'Cor vermelha, tamanho: GG','Cor cinza, tamanho: PP', 'Cor cinza, tamanho: P', 'Cor cinza, tamanho: M', 'Cor cinza, tamanho: G', 'Cor cinza, tamanho: GG','Cor mostarda, tamanho: PP', 'Cor mostarda, tamanho: P' 'Cor mostarda, tamanho: M', 'Cor mostarda, tamanho: G', 'Cor mostarda, tamanho: GG','Cor lilás, tamanho: PP', 'Cor lilás, tamanho: P', 'Cor lilás, tamanho: M', 'Cor lilás, tamanho: G', 'Cor lilás, tamanho: GG','Cor roxo, tamanho: PP', 'Cor roxo, tamanho: P', 'Cor roxo, tamanho: M', 'Cor roxo, tamanho: G', 'Cor roxo, tamanho: GG']
descricao_acessorio=['Ouro', 'Banhado a Ouro' 'Banhado a Prata', 'Prata', 'Bronze', 'Latão', 'Alumínio', 'Ferro', 'Inox', 'Anti alérgico']
descricao_calcados=['Cor azul, tamanho: 35', 'Cor azul, tamanho: 36', 'Cor azul, tamanho: 37', 'Cor azul, tamanho: 38', 'Cor azul, tamanho: 39', 'Cor azul, tamanho: 40', 'Cor azul, tamanho: 41', 'Cor azul, tamanho: 42', 'Cor azul, tamanho: 43', 'Cor azul, tamanho: 44', 'Cor preto, tamanho: 35', 'Cor preto, tamanho: 36', 'Cor preto, tamanho: 37', 'Cor preto, tamanho: 38', 'Cor preto, tamanho: 39','Cor branco, tamanho: 35', 'Cor branco, tamanho: 36', 'Cor branco, tamanho: 37','Cor branco, tamanho: 38', 'Cor branco, tamanho: 39', 'Cor branco, tamanho: 40', 'Cor branco, tamanho: 41', 'Cor branco, tamanho: 42', 'Cor branco, tamanho: 43', 'Cor branco, tamanho: 44','Cor vermelha, tamanho: 35', 'Cor vermelha, tamanho: 36', 'Cor vermelha, tamanho: 37', 'Cor vermelha, tamanho: 38', 'Cor vermelha, tamanho: 39', 'Cor vermelha, tamanho: 40', 'Cor vermelha, tamanho: 41', 'Cor vermelha, tamanho: 42', 'Cor vermelha, tamanho: 43', 'Cor vermelha, tamanho: 44','Cor cinza, tamanho: 35', 'Cor cinza, tamanho: 36', 'Cor cinza, tamanho: 37', 'Cor cinza, tamanho: 38', 'Cor cinza, tamanho: 39', 'Cor cinza, tamanho: 40', 'Cor cinza, tamanho: 41', 'Cor cinza, tamanho: 42', 'Cor cinza, tamanho: 43', 'Cor cinza, tamanho: 44','Cor mostarda, tamanho: 35', 'Cor mostarda, tamanho: 36' 'Cor mostarda, tamanho: 37', 'Cor mostarda, tamanho: 38', 'Cor mostarda, tamanho: 39', 'Cor mostarda, tamanho: 40', 'Cor mostarda, tamanho: 41', 'Cor mostarda, tamanho: 42', 'Cor mostarda, tamanho: 43', 'Cor mostarda, tamanho: 44','Cor lilás, tamanho: 35', 'Cor lilás, tamanho: 36', 'Cor lilás, tamanho: 37', 'Cor lilás, tamanho: 38', 'Cor lilás, tamanho: 39', 'Cor lilás, tamanho: 40','Cor roxo, tamanho: 35', 'Cor roxo, tamanho: 36', 'Cor roxo, tamanho: 37', 'Cor roxo, tamanho: 38', 'Cor roxo, tamanho: 39', 'Cor roxo, tamanho: 40']
descricao_viagem=['Cor: preto', 'Cor: branco', 'Cor: cinza', 'Cor: vermelho', 'Cor: azul']
descricao_higiene=['Marca: Lux', 'Marca: MM', 'Marca: J&W', 'Marca: FX', 'Marca: Nature', 'Marca: Cristal', 'Marca: Diamond', 'Marca: Bela']

comentarios_positivos = ['Adorei', 'Gostei', 'Melhor escolha', 'Bom', 'Muito bom', 'Sensacional', 
                         'Fantástico', 'Não me arrependo', 'Podem comprar']
comentarios_negativos = ['Odiei', 'Não gostei', 'Pior Escolha', 'Ruim', 'Muito Ruim', 'Horrível',
                         'Horroroso', 'Eu me arrependi', 'Não comprem']

"""## Funções de Apoio - Tabela Consumidor"""

#Utiliza o nome definido e o número da iteração para gerar o e-mail no formato @gmail.com.
def gerar_email(name, qtd):
    email = name.lower() + str(qtd) + "@gmail.com"
    return email

# Utiliza a estrutura letra definida anteriormente para gerar uma senha com 20 caracteres minúsculos randômicos.
def gerar_senha():
    senha = ''
    for i in range(0, 20):
        senha = senha + letra[randint(0, len(letra) - 1)]
    return senha

# Gerar o cpf pegando 11 números randômicos entre 0 e 9 e concatenando na variável cpf.
def gerar_cpf():
    cpf = ''
    for i in range(0, 11):
        cpf = cpf + str(randint(0, 9))
    return cpf

def gerar_telefone():
    telefone = '0'
    ddd = str(randint(11, 99))
    telefone = telefone + ddd + ' '
    for i in range(0, 10):
        if i == 5:
            telefone = telefone + '-'
        else:
            telefone = telefone + str(randint(0, 9))
    return telefone

def gerar_data():
    ano = randint(1940, 2001)
    mes = randint(1, 12)
    # O próximo bloco de condições é para saber qual intervalo de valores a variável dia pode assumir.
    # Levando em consideração o mês e se o ano é bissexto.
    if(mes == 1 | mes == 3 | mes == 5 | mes == 7 | mes == 8 | mes == 10 | mes == 12):    
        dia = randint(1, 31)
    elif(mes == 2 & 
         (ano % 400 == 0 | 
          ano % 4 == 0 & ano % 100 != 0)):
        dia = randint(1, 29)
    elif(mes == 2):
        dia = randint(1, 28)
    else:
        dia = randint(1, 30)
    # Depois é uma conversão da variável dia e mês para str, se for entre 1 e 9, adicionará um 0.
    if dia < 10:
        dia = '0' + str(dia)
    else:
        dia = str(dia)
        
    if mes < 10:
        mes = '0' + str(mes)
    else:
        mes = str(mes)
    # Concatenação dos valores
    data = dia + '/' + mes + '/' + str(ano)
    return data

def gerar_cidade():
    return cidade[randint(0, len(cidade) - 1)]

def gerar_nome():
    return nome[randint(0, len(nome) - 1)]

def gerar_endereco():
    endereco_final = endereco[randint(0, len(endereco) - 1)]
    numero = str(randint(0, 2000))
    endereco_final = endereco_final + ', ' + numero
    return endereco_final

"""Método para geração de tuplas na tabela **consumidor**, recebe o cursor que tem conexão com o BD, utiliza as funções auxiliares anteriores para gerar os dados necessários para cada tupla. Por último, utiliza o método ```execute``` para gerar as tuplas. Vale ressaltar que é recomendado que os parâmetros do ```execute``` sejam uma lista ```()```."""

def adicionar_consumidor(cursor_principal):
    print("Adicionando 500000 consumidores, aguarde...")
    i=0
    while i < 500000:
        cpf = gerar_cpf()
        nome = gerar_nome()
        data_nasc = gerar_data()
        telefone = gerar_telefone()
        email = gerar_email(nome, i)
        senha = gerar_senha()
        endereco = gerar_endereco()
        cidade = gerar_cidade()
        try:
            cursor_principal.execute('INSERT INTO consumidor VALUES(%s, %s, %s, %s, %s, %s, %s, %s)', (cpf, nome, data_nasc, telefone, email, senha, endereco, cidade))
            conexao_bd.commit()
            i+=1
        except psycopg2.IntegrityError as err:
            # if duplicated, repeat the operation with other values
            conexao_bd.rollback()
"""## Funções de Apoio - Tabela Produto"""

def adicionar_produto(cursor_principal):
  print("Adicionando 500000 produtos, aguarde...")
  i=0
  while i < 500000:
    produto_id=randint(0,len(nome_produto)-1)
    if produto_id < 24:
        descricao = descricao_vestuario[randint(0,len(descricao_vestuario)-1)]
        tipo_final = tipo_produto[0]
    elif produto_id < 31:
        descricao = descricao_acessorio[randint(0,len(descricao_acessorio)-1)]
        tipo_final = tipo_produto[1]
    elif produto_id <41:
        descricao = descricao_calcados[randint(0,len(descricao_calcados)-1)]
        tipo_final = tipo_produto[2]
    elif produto_id <46:
        descricao = descricao_viagem[randint(0,len(descricao_viagem)-1)]
        tipo_final = tipo_produto[3]    
    else:
        descricao=descricao_higiene[randint(0,len(descricao_higiene)-1)]
        tipo_final = tipo_produto[4]  
    try:
        cursor_principal.execute('INSERT INTO produto(nome_produto, preco, descricao, categoria) VALUES(%s, %s, %s, %s)', (nome_produto[produto_id], round(random() * 1000, 2), nome_produto[produto_id] + ' ' + descricao, tipo_final))
        conexao_bd.commit()
        i+=1
    except psycopg2.IntegrityError:
        # if duplicated, repeat the operation with other values
        conexao_bd.rollback()

"""## Funções de Apoio - Tabela Compra"""

def gerar_data_compra():
    ano = randint(2015, 2020)
    mes = randint(1, 12)
    # O próximo bloco de condições é para saber qual intervalo de valores a variável dia pode assumir.
    # Levando em consideração o mês e se o ano é bissexto.
    if(mes == 1 | mes == 3 | mes == 5 | mes == 7 | mes == 8 | mes == 10 | mes == 12):    
        dia = randint(1, 31)
    elif(mes == 2 & 
         (ano % 400 == 0 | 
          ano % 4 == 0 & ano % 100 != 0)):
        dia = randint(1, 29)
    elif(mes == 2):
        dia = randint(1, 28)
    else:
        dia = randint(1, 30)
    # Depois é uma conversão da variável dia e mês para str, se for entre 1 e 9, adicionará um 0.
    if dia < 10:
        dia = '0' + str(dia)
    else:
        dia = str(dia)
        
    if mes < 10:
        mes = '0' + str(mes)
    else:
        mes = str(mes)
    # Concatenação dos valores
    data = dia + '/' + mes + '/' + str(ano)
    return data

"""O método ```random()``` pega um valor entre 0 e 1, então para determinar o número de estrelas que é entre 0 e 5, é utilizado esse valor multiplicado por 5 com uma casa decimal de precisão."""

def gerar_estrelas():
    return (round(random() * 5, 1))

def gerar_comentario(n_estrelas):
    if n_estrelas > 3.5:
        return comentarios_positivos[randint(0, len(comentarios_positivos) - 1)]
    else:
        return comentarios_negativos[randint(0, len(comentarios_negativos) - 1)]

def gerar_entregue():
    if randint(0, 1) == 1:
        return True
    return False

def gerar_quantidade():
    return randint(1, 10)

def gerar_hora():
    hora = randint(0, 23)
    minuto = randint(0, 59)
    segundo = randint(0, 59)
    return str(hora) + ':' + str(minuto) + ':' + str(segundo)

"""Método para adicionar a tupla para a coluna Compra utilizando os métodos anteriores para auxiliar na determinação dos valores de cada coluna.

O ```fetchall()``` retorna para cada linha da tabela, uma tupla (estrutura do Python) no formato (cpf, ), ou seja, faz-se necessário processar essas tuplas para conseguir ter acesso ao cpf dos consumidores. Para isso, será usada a biblioteca Pandas e a estrutura de dados DataFrame, assim será possível acessar cada cpf individualmente.

O Pandas converte número inteiros para o tipo numpy.int64. Contudo, a biblioteca ```psycopg2``` não trata esse tipo. Então, foi necessário usar o construtor ```int()``` para converter os valores numpy.int64 para int.
"""

def adicionar_compra(conexao_bd):
    
    cursor_compra = conexao_bd.cursor()
    
    cursor_compra.execute("SELECT cpf FROM consumidor")
    cpf_consumidor = cursor_compra.fetchall()
    cpf_consumidor = pd.DataFrame(cpf_consumidor, columns = ['cpf'])
    
    cursor_compra.execute("SELECT id FROM produto")
    id_produto = cursor_compra.fetchall()
    id_produto = pd.DataFrame(id_produto, columns = ['id'])
    
    print("Adicionando 500000 compras, aguarde...")
    i=0
    while i < 500000:
        cpf = cpf_consumidor['cpf'][randint(0, len(cpf_consumidor) - 1)]
        produto_id = id_produto['id'][randint(0, len(id_produto) - 1)]
        data = gerar_data_compra() + ' ' + gerar_hora()
        quantidade = gerar_quantidade()
        entregue = gerar_entregue()
        n_estrelas = gerar_estrelas()
        comentario = gerar_comentario(n_estrelas)
        try:
            cursor_compra.execute('INSERT INTO compra VALUES(%s, %s, %s, %s, %s, %s, %s)', (int(produto_id), cpf, data, quantidade, entregue, n_estrelas, comentario))
            conexao_bd.commit()
            i+=1
        except psycopg2.IntegrityError:
            # if duplicated, repeat the operation with other values
            conexao_bd.rollback()

"""## Conexão com o BD

Para o funcionamento do comando seguinte, é necessário:
- Iniciar o banco de dados PostgreSQL.
- Trocar os parâmetros ```user``` e ```password``` para o seu usuário e senha no postgres.
"""

conexao_bd = psycopg2.connect(
    host="localhost",
    database="g1_loja",
    user="postgres",
    password="root")

"""Para a execução das consultas, é necessário instanciar um cursor."""

cursor_principal = conexao_bd.cursor()

"""## Execução do Código"""

adicionar_consumidor(cursor_principal)

adicionar_produto(cursor_principal)

adicionar_compra(conexao_bd)

"""## Desconexão com o BD

Por último, feche o cursor e a conexão com o BD.
"""
cursor_principal.close()
conexao_bd.close()